c : 
	⁃	character ‘a’ ‘b’ ‘c’ ect
	⁃	
	⁃	if number = add number of spaces BEFORE char
	⁃	if number is NEGATIVE = add number of spaces AFTER char
	⁃	The number of spaces is the length of the arg - the number
	⁃	
	⁃	if * = get arg BEFORE flag c = works as normal numbers
	⁃	
	⁃	if - && number = add number of spaces AFTER char
	⁃	if - && NEGATIVE number = number is considered POSITIVE
	⁃	
	⁃	if number BEFORE ignored flags = number is done, flags after are ignored
	⁃	
	⁃	if 0 = flag is ignored
	⁃	if 0 && number = flag is ignored
	⁃	
	⁃	if . && number = char is displayed as is
	⁃	if . && NEGATIVE number = char is displayed as is

s : 
	⁃	Displays strings
	⁃	
	⁃	if number = add number of spaces BEFORE string
	⁃	if number is NEGATIVE = add number of spaces AFTER string
	⁃	The number of spaces is the length of the arg - the number
	⁃	
	⁃	if * = get arg BEFORE flag c = works as normal numbers
	⁃	
	⁃	if - && number = add number of spaces AFTER string
	⁃	if - && NEGATIVE number = number is considered POSITIVE
	⁃	
	⁃	if 0 = string displayed as is
	⁃	if 0 && number = string displayed as is
	⁃	
	⁃	if . && number = return string of size number
	⁃	if . && NEGATIVE number = string is displayed as is
	⁃	if . && 0 = string is not displayed at all

p : 
	⁃	displays address of arg
	⁃	whatever that means

d  i :
	⁃	Displays decimal integers
	⁃	If unsigned int = can overflow
	⁃	Displays ascii of char
	⁃	
	⁃	if number = add number of spaces BEFORE int
	⁃	if number is NEGATIVE = add number of spaces AFTER int
	⁃	The number of spaces is the length of the arg - the number
	⁃	
	⁃	if * = get arg BEFORE flag c = works as normal numbers
	⁃	
	⁃	if - && number = add number of spaces AFTER int
	⁃	if - && NEGATIVE number = number is considered POSITIVE
	⁃	
	⁃	if 0 = add number of 0 before int
	⁃	If no number is given, nothing happens, number is displayed as 
	⁃	If double flag 0= ignored, nothing happens, arg is displayed as is
	⁃	
	⁃	If - && 0 = 0 is ignored and spaces are displayed
	⁃	
	⁃	if . && number = add number of 0 BEFORE int
	⁃	number of zero = size of int - number
	⁃	if . && NEGATIVE number = int is displayed as is
	⁃	if . && 0 = int is displayed as is

u : 
	⁃	Displays unsigned and signed int
	⁃	Displays ascii of char
	⁃	
	⁃	if number = add number of spaces BEFORE  unsigned int
	⁃	if number is NEGATIVE = add number of spaces AFTER unsigned int
	⁃	The number of spaces is the length of the arg - the number
	⁃	
	⁃	if * = get arg BEFORE flag c = works as normal numbers
	⁃	
	⁃	if - && number = add number of spaces AFTER unsigned int
	⁃	if - && NEGATIVE number = number is considered POSITIVE
	⁃	
	⁃	if 0 = add number of 0 before int
	⁃	If no number is given, nothing happens, number is displayed as is
	⁃	If double flag 0= ignored, nothing happens, arg is displayed as is
	⁃	
	⁃	if - && 0 = 0 is ignored and spaces are displayed
	⁃	
	⁃	if . && number = add number of 0 BEFORE int
	⁃	number of zero = size of int - number
	⁃	if . && NEGATIVE number = int is displayed as is
	⁃	if . && 0 = int is displayed as is

x  X :
	⁃	Unsigned int converted to hexadecimal unsigned
	⁃	If x letters are normal “abcde”
	⁃	If X letters are capslock “ABCDE” 
	⁃	If char && xX= convert ascii number from decimal to hexadecimal
	⁃	
	⁃	if number = add number of spaces BEFORE int
	⁃	if number is NEGATIVE = add number of spaces AFTER int
	⁃	The number of spaces is the length of the arg - the number
	⁃	
	⁃	if * = get arg BEFORE flag c = works as normal numbers
	⁃	
	⁃	if - && number = add number of spaces AFTER int
	⁃	if - && NEGATIVE number = number is considered POSITIVE
	⁃	
	⁃	if 0 = add number of 0 before int
	⁃	If no number is given, nothing happens, number is displayed as is
	⁃	If double flag 0= ignored, nothing happens, arg is displayed as is
	⁃	
	⁃	If - && 0 = 0 is ignored and spaces are displayed
	⁃	
	⁃	if . && number = add number of 0 BEFORE int
	⁃	number of zero = size of int - number
	⁃	if . && NEGATIVE number = int is displayed as is
	⁃	if . && 0 = int is displayed as is

% : 
	⁃	if “%” nothing happens
	⁃	if “%%” a % is printed
	-	until the next % everything is counted as a string

numbers :
	⁃	if * && number = argument ignored

-:
	⁃	if - && - = only one - is treated, the other one is ignored

0 :
	⁃	if 0 && 0 = argument is ignored

. : 
	-	if . && . = invalid argument

*:
	⁃	if * && * = invalid argument
